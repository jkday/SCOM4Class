#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SCOM_4811:server');
var http = require('http');
var socketio = require('socket.io'),
    url = require("url"),
    SerialPort = require("serialport");

var socketServer;
var serialPort;
var portName = 'COM3'; //change this to your Arduino port
var sendData = "";

var verbose = true;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
/*set NODE_ENV somewhere else eventually! */
process.env.NODE_ENV = 'dev';

/**
 * Create HTTP server. Listen on provided port, on all network interfaces.
 */

var httpServer = http.createServer(app).listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/*Uncomment for serialport functionality

serialListener(verbose);
initSocketIO(httpServer, verbose);
*/

/*FUNCTIONS BELOW HERE**************/


function initSocketIO(httpServer, verbose) {
    socketServer = socketio.listen(httpServer);
    if (verbose == false) {
        socketServer.set('log level', 1); // socket IO verbose off
    }

    socketServer.on('connection', function(socket) {
        console.log("SOCKETIO: user connected");
        socket.emit('onconnection', { unoData: sendData });

        //socket.emit('update', { pollOneValue: sendData });

        socket.on('buttonval', function(data) {
            serialPort.write(data + 'E');
        });
        socket.on('sliderval', function(data) {
            serialPort.write(data + 'P');
        });

    });

}

// Listen to serial port
function serialListener(verbose) {
    var receivedData = "";
    serialPort = new SerialPort(portName, {
        baudRate: 9600,
        // defaults for Arduino serial communication
        dataBits: 8,
        parity: 'none',
        stopBits: 1,
        flowControl: false
    }, function(err) {
        if (err) {
            console.log("check COM address in /bin/www")
            return console.log('Error: ', err.message);
        }
        console.log('open serial communication');

    });

    serialPort.on('data', function(data) {
        receivedData += data.toString();
        if (receivedData.indexOf('E') >= 0 && receivedData.indexOf('B') >= 0) {
            sendData = receivedData.substring(receivedData.indexOf('B') + 1, receivedData.indexOf('E'));
            receivedData = '';
            console.log(sendData)
        }
        // send the incoming data to browser with websockets.
        socketServer.emit('update', { unoData: sendData });
    });

}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = httpServer.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("HTTP Server is up");
    console.log("Listening at: http://localhost:3001");
}